# -*- coding: utf-8 -*-
"""KNN_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPF0iylBsVX6ZYQCnDNoqrdhXQyVH7ID

# importer les modules numpy, pandas et sklearn
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/gdrive')

"""# charge le fichier Excel comprenant les données. 
affiche les cinq premiers enregistrements de l’ensemble des données
"""

df = pd.read_excel('/content/gdrive/MyDrive/ML/pratique/fruitDataset.xlsx')
df.head()

"""# créer une correspondance entre la valeur de l’étiquette du fruit et son nom """

nom_fruit_cible = dict( zip (df.etiquette_fruit.unique(), df.nom_fruit.unique()))
print( nom_fruit_cible )

"""# - définir deux variables x (attributs) et y (nom cible). 
# - fractionner en train et test qui sont par défaut à 75/25 %.
"""

x = df [['poids', 'largeur', 'hauteur']]
y = df['etiquette_fruit']
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=0)

"""# créer classificateur KNN + train"""

from sklearn.neighbors import KNeighborsClassifier
#instanciation et définition du k
knn = KNeighborsClassifier(n_neighbors = 3)
#training
knn.fit(x_train,y_train)

"""# evaluer le modèle"""

knn.score(x_test,y_test)

"""# prédiction pour une observation """

prediction_fruit = knn.predict([[20,4.3,5.5]])
nom_fruit_cible[prediction_fruit[0]]

prediction_fruit = knn.predict([[180,8.0,6.8]])
nom_fruit_cible[prediction_fruit[0]]

predictions = knn.predict(x_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, predictions))

"""# Confusion matrix"""

print(x_test)

# providing actual and predicted values
y_pred= knn.predict(x)
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import style
cm = confusion_matrix(y, y_pred)
sns.color_palette("Paired")
# If True, write the data value in each cell
sns.heatmap(cm,annot=True,cmap=sns.color_palette("vlag", as_cmap=True))

# saving confusion matrix in png form
plt.savefig('confusion_Matrix.png')
print(cm)

col=sns.color_palette("light:b", as_cmap=True)
def plot_confusion_matrix(cm, classes, normalized=True, cmap=col): #sns.color_palette("vlag", as_cmap=True)):
    plt.figure(figsize=[7, 6])
    norm_cm = cm
    if normalized:
        norm_cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        sns.heatmap(norm_cm, annot=cm, fmt='g', xticklabels=classes, yticklabels=classes, cmap=cmap)

plot_confusion_matrix(cm, ['mandarine', 'pomme'])

knn.